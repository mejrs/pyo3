initSidebarItems({"enum":[["Delimiter","Describes how a sequence of token trees is delimited."],["Spacing","Whether a `Punct` is followed immediately by another `Punct` or followed by another token or whitespace."],["TokenTree","A single token or a delimited sequence of token trees (e.g. `[1, (), ..]`)."]],"fn":[["mk_ident",""],["parse",""],["parse_spanned",""],["push_add",""],["push_add_eq",""],["push_add_eq_spanned",""],["push_add_spanned",""],["push_and",""],["push_and_and",""],["push_and_and_spanned",""],["push_and_eq",""],["push_and_eq_spanned",""],["push_and_spanned",""],["push_at",""],["push_at_spanned",""],["push_bang",""],["push_bang_spanned",""],["push_caret",""],["push_caret_eq",""],["push_caret_eq_spanned",""],["push_caret_spanned",""],["push_colon",""],["push_colon2",""],["push_colon2_spanned",""],["push_colon_spanned",""],["push_comma",""],["push_comma_spanned",""],["push_div",""],["push_div_eq",""],["push_div_eq_spanned",""],["push_div_spanned",""],["push_dot",""],["push_dot2",""],["push_dot2_spanned",""],["push_dot3",""],["push_dot3_spanned",""],["push_dot_dot_eq",""],["push_dot_dot_eq_spanned",""],["push_dot_spanned",""],["push_eq",""],["push_eq_eq",""],["push_eq_eq_spanned",""],["push_eq_spanned",""],["push_fat_arrow",""],["push_fat_arrow_spanned",""],["push_ge",""],["push_ge_spanned",""],["push_group",""],["push_group_spanned",""],["push_gt",""],["push_gt_spanned",""],["push_ident",""],["push_ident_spanned",""],["push_larrow",""],["push_larrow_spanned",""],["push_le",""],["push_le_spanned",""],["push_lt",""],["push_lt_spanned",""],["push_mul_eq",""],["push_mul_eq_spanned",""],["push_ne",""],["push_ne_spanned",""],["push_or",""],["push_or_eq",""],["push_or_eq_spanned",""],["push_or_or",""],["push_or_or_spanned",""],["push_or_spanned",""],["push_pound",""],["push_pound_spanned",""],["push_question",""],["push_question_spanned",""],["push_rarrow",""],["push_rarrow_spanned",""],["push_rem",""],["push_rem_eq",""],["push_rem_eq_spanned",""],["push_rem_spanned",""],["push_semi",""],["push_semi_spanned",""],["push_shl",""],["push_shl_eq",""],["push_shl_eq_spanned",""],["push_shl_spanned",""],["push_shr",""],["push_shr_eq",""],["push_shr_eq_spanned",""],["push_shr_spanned",""],["push_star",""],["push_star_spanned",""],["push_sub",""],["push_sub_eq",""],["push_sub_eq_spanned",""],["push_sub_spanned",""]],"mod":[["ext","Extension traits used by the implementation of `quote!`. These are defined in separate traits, rather than as a single trait due to ambiguity issues."],["fallback",""],["token_stream","Public implementation details for the `TokenStream` type, such as iterators."]],"struct":[["Group","A delimited token stream."],["HasIterator",""],["Ident","A word of Rust code, which may be a keyword or legal variable name."],["IdentFragmentAdapter",""],["LexError","Error returned from `TokenStream::from_str`."],["Literal","A literal string (`\"hello\"`), byte string (`b\"hello\"`), character (`'a'`), byte character (`b'a'`), an integer or floating point number with or without a suffix (`1`, `1u8`, `2.3`, `2.3f32`)."],["Punct","A `Punct` is a single punctuation character like `+`, `-` or `#`."],["RepInterp",""],["Span","A region of source code, along with macro expansion information."],["ThereIsNoIteratorInRepetition",""],["TokenStream","An abstract stream of tokens, or more concretely a sequence of token trees."]]});