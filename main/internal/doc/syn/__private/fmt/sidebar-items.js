initSidebarItems({"enum":[["Alignment","Possible alignments returned by `Formatter::align`"]],"fn":[["format","The `format` function takes an [`Arguments`] struct and returns the resulting formatted string."],["write","The `write` function takes an output stream, and an `Arguments` struct that can be precompiled with the `format_args!` macro."]],"macro":[["Debug","Derive macro generating an impl of the trait `Debug`."]],"mod":[["rt",""]],"struct":[["ArgumentV1","This struct represents the generic “argument” which is taken by the Xprintf family of functions. It contains a function to format the given value. At compile time it is ensured that the function and the value have the correct types, and then this struct is used to canonicalize arguments to one type."],["Arguments","This structure represents a safely precompiled version of a format string and its arguments. This cannot be generated at runtime because it cannot safely be done, so no constructors are given and the fields are private to prevent modification."],["DebugList","A struct to help with `fmt::Debug` implementations."],["DebugMap","A struct to help with `fmt::Debug` implementations."],["DebugSet","A struct to help with `fmt::Debug` implementations."],["DebugStruct","A struct to help with `fmt::Debug` implementations."],["DebugTuple","A struct to help with `fmt::Debug` implementations."],["Error","The error type which is returned from formatting a message into a stream."],["Formatter","Configuration for formatting."]],"trait":[["Binary","`b` formatting."],["Debug","`?` formatting."],["Display","Format trait for an empty format, `{}`."],["LowerExp","`e` formatting."],["LowerHex","`x` formatting."],["Octal","`o` formatting."],["Pointer","`p` formatting."],["UpperExp","`E` formatting."],["UpperHex","`X` formatting."],["Write","A trait for writing or formatting into Unicode-accepting buffers or streams."]],"type":[["Result","The type returned by formatter methods."]]});